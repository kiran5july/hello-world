/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.kiran.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"com.kiran.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"profession\",\"type\":[\"string\",\"null\"]},{\"name\":\"email\",\"type\":[\"string\",\"null\"]},{\"name\":\"login\",\"type\":[\"string\",\"null\"]},{\"name\":\"loc\",\"type\":[\"string\",\"null\"],\"default\":\"null\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence profession;
  @Deprecated public java.lang.CharSequence email;
  @Deprecated public java.lang.CharSequence login;
  @Deprecated public java.lang.CharSequence loc;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public User() {}

  /**
   * All-args constructor.
   */
  public User(java.lang.Integer id, java.lang.CharSequence name, java.lang.CharSequence profession, java.lang.CharSequence email, java.lang.CharSequence login, java.lang.CharSequence loc) {
    this.id = id;
    this.name = name;
    this.profession = profession;
    this.email = email;
    this.login = login;
    this.loc = loc;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return profession;
    case 3: return email;
    case 4: return login;
    case 5: return loc;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: profession = (java.lang.CharSequence)value$; break;
    case 3: email = (java.lang.CharSequence)value$; break;
    case 4: login = (java.lang.CharSequence)value$; break;
    case 5: loc = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'profession' field.
   */
  public java.lang.CharSequence getProfession() {
    return profession;
  }

  /**
   * Sets the value of the 'profession' field.
   * @param value the value to set.
   */
  public void setProfession(java.lang.CharSequence value) {
    this.profession = value;
  }

  /**
   * Gets the value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'login' field.
   */
  public java.lang.CharSequence getLogin() {
    return login;
  }

  /**
   * Sets the value of the 'login' field.
   * @param value the value to set.
   */
  public void setLogin(java.lang.CharSequence value) {
    this.login = value;
  }

  /**
   * Gets the value of the 'loc' field.
   */
  public java.lang.CharSequence getLoc() {
    return loc;
  }

  /**
   * Sets the value of the 'loc' field.
   * @param value the value to set.
   */
  public void setLoc(java.lang.CharSequence value) {
    this.loc = value;
  }

  /** Creates a new User RecordBuilder */
  public static com.kiran.avro.User.Builder newBuilder() {
    return new com.kiran.avro.User.Builder();
  }
  
  /** Creates a new User RecordBuilder by copying an existing Builder */
  public static com.kiran.avro.User.Builder newBuilder(com.kiran.avro.User.Builder other) {
    return new com.kiran.avro.User.Builder(other);
  }
  
  /** Creates a new User RecordBuilder by copying an existing User instance */
  public static com.kiran.avro.User.Builder newBuilder(com.kiran.avro.User other) {
    return new com.kiran.avro.User.Builder(other);
  }
  
  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private int id;
    private java.lang.CharSequence name;
    private java.lang.CharSequence profession;
    private java.lang.CharSequence email;
    private java.lang.CharSequence login;
    private java.lang.CharSequence loc;

    /** Creates a new Builder */
    private Builder() {
      super(com.kiran.avro.User.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.kiran.avro.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.profession)) {
        this.profession = data().deepCopy(fields()[2].schema(), other.profession);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.login)) {
        this.login = data().deepCopy(fields()[4].schema(), other.login);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.loc)) {
        this.loc = data().deepCopy(fields()[5].schema(), other.loc);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing User instance */
    private Builder(com.kiran.avro.User other) {
            super(com.kiran.avro.User.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.profession)) {
        this.profession = data().deepCopy(fields()[2].schema(), other.profession);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.login)) {
        this.login = data().deepCopy(fields()[4].schema(), other.login);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.loc)) {
        this.loc = data().deepCopy(fields()[5].schema(), other.loc);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Integer getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.kiran.avro.User.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public com.kiran.avro.User.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public com.kiran.avro.User.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'name' field */
    public com.kiran.avro.User.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'profession' field */
    public java.lang.CharSequence getProfession() {
      return profession;
    }
    
    /** Sets the value of the 'profession' field */
    public com.kiran.avro.User.Builder setProfession(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.profession = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'profession' field has been set */
    public boolean hasProfession() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'profession' field */
    public com.kiran.avro.User.Builder clearProfession() {
      profession = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'email' field */
    public java.lang.CharSequence getEmail() {
      return email;
    }
    
    /** Sets the value of the 'email' field */
    public com.kiran.avro.User.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.email = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'email' field has been set */
    public boolean hasEmail() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'email' field */
    public com.kiran.avro.User.Builder clearEmail() {
      email = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'login' field */
    public java.lang.CharSequence getLogin() {
      return login;
    }
    
    /** Sets the value of the 'login' field */
    public com.kiran.avro.User.Builder setLogin(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.login = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'login' field has been set */
    public boolean hasLogin() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'login' field */
    public com.kiran.avro.User.Builder clearLogin() {
      login = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'loc' field */
    public java.lang.CharSequence getLoc() {
      return loc;
    }
    
    /** Sets the value of the 'loc' field */
    public com.kiran.avro.User.Builder setLoc(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.loc = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'loc' field has been set */
    public boolean hasLoc() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'loc' field */
    public com.kiran.avro.User.Builder clearLoc() {
      loc = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    //@Override //KM: commented due to syntax error
    public User build() {
      try {
        User record = new User();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.profession = fieldSetFlags()[2] ? this.profession : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.email = fieldSetFlags()[3] ? this.email : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.login = fieldSetFlags()[4] ? this.login : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.loc = fieldSetFlags()[5] ? this.loc : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}